-- Azure PostgreSQL Compatible Initialization Script
-- Fully idempotent

-- Session setup
SET session_replication_role = replica;
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

-- FIX: set a proper search path
SET search_path = public;

SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;
SET default_tablespace = '';
SET default_table_access_method = heap;

-----------------------------------
-- Pets table
-----------------------------------
CREATE TABLE IF NOT EXISTS public.pets (
    "caseId" bigint NOT NULL,
    name text,
    "petType" text,
    contact text,
    "isLost" boolean,
    "caseStatus" text,
    position__latitude double precision,
    position__longitude double precision,
    "imageUrl" text,
    description text,
    message text,
    "reporterName" text,
    reward text,
    breed text,
    tags text,
    language text,
    "reportDate" timestamp with time zone,
    "microchip__hasMicrochip" boolean,
    "microchip__microchipNumber" text
);

-- Make caseId an identity column if not already
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM information_schema.columns
        WHERE table_schema = 'public'
          AND table_name = 'pets'
          AND column_name = 'caseId'
          AND is_identity = 'YES'
    ) THEN
        EXECUTE 'ALTER TABLE public.pets ALTER COLUMN "caseId" ADD GENERATED BY DEFAULT AS IDENTITY
            (SEQUENCE NAME public."pets_caseId_seq" START WITH 1 INCREMENT BY 1)';
    END IF;
END
$$;

-- Add primary key if not exists
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_constraint
        WHERE conname = 'pets_pkey'
    ) THEN
        EXECUTE 'ALTER TABLE public.pets ADD CONSTRAINT pets_pkey PRIMARY KEY ("caseId")';
    END IF;
END
$$;


-----------------------------------
-- Reports table
-----------------------------------
CREATE TABLE IF NOT EXISTS public.reports (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    "caseId" bigint,
    name text,
    contact text,
    "reportLatitude" double precision,
    "reportLongitude" double precision,
    "isPetFoundReport" boolean,
    language text,
    "isCaseReviewed" boolean,
    "imageUrl" text,
    message text,
    "petType" text NOT NULL,
    CONSTRAINT reports_message_check CHECK (length(message) < 200)
);

-- Make id an identity column if not already
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM information_schema.columns
        WHERE table_schema = 'public'
          AND table_name = 'reports'
          AND column_name = 'id'
          AND is_identity = 'YES'
    ) THEN
        EXECUTE 'ALTER TABLE public.reports ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY
            (SEQUENCE NAME public.reports_id_seq START WITH 1 INCREMENT BY 1)';
    END IF;
END
$$;

-- Add primary key if not exists
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_constraint
        WHERE conname = 'reports_pkey'
    ) THEN
        EXECUTE 'ALTER TABLE public.reports ADD CONSTRAINT reports_pkey PRIMARY KEY (id)';
    END IF;
END
$$;

-- Add foreign key reports.caseId -> pets.caseId if not exists
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_constraint
        WHERE conname = 'reports_caseId_fkey'
    ) THEN
        EXECUTE 'ALTER TABLE public.reports ADD CONSTRAINT "reports_caseId_fkey"
            FOREIGN KEY ("caseId") REFERENCES public.pets("caseId")';
    END IF;
END
$$;

-- Enable PostGIS extension
CREATE EXTENSION IF NOT EXISTS postgis;

-- Add geometry columns
ALTER TABLE pets ADD COLUMN IF NOT EXISTS geom geometry(Point, 4326);
ALTER TABLE reports ADD COLUMN IF NOT EXISTS geom geometry(Point, 4326);

-- Populate geometry columns from existing lat/lng data
UPDATE pets
SET geom = ST_SetSRID(ST_MakePoint("position__longitude", "position__latitude"), 4326)
WHERE geom IS NULL AND "position__longitude" IS NOT NULL AND "position__latitude" IS NOT NULL;

UPDATE reports
SET geom = ST_SetSRID(ST_MakePoint("reportLongitude", "reportLatitude"), 4326)
WHERE geom IS NULL AND "reportLongitude" IS NOT NULL AND "reportLatitude" IS NOT NULL;

-- Create spatial indexes (THIS IS KEY FOR PERFORMANCE!)
CREATE INDEX IF NOT EXISTS pets_geom_idx ON pets USING GIST(geom);
CREATE INDEX IF NOT EXISTS reports_geom_idx ON reports USING GIST(geom);

CREATE OR REPLACE FUNCTION update_pets_geom() RETURNS TRIGGER AS $$
BEGIN
  NEW.geom = ST_SetSRID(ST_MakePoint(NEW."position__longitude", NEW."position__latitude"), 4326);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER pets_geom_trigger
BEFORE INSERT OR UPDATE OF "position__latitude", "position__longitude" ON pets
FOR EACH ROW
WHEN (NEW."position__longitude" IS NOT NULL AND NEW."position__latitude" IS NOT NULL)
EXECUTE FUNCTION update_pets_geom();

CREATE OR REPLACE FUNCTION update_reports_geom() RETURNS TRIGGER AS $$
BEGIN
  NEW.geom = ST_SetSRID(ST_MakePoint(NEW."reportLongitude", NEW."reportLatitude"), 4326);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER reports_geom_trigger
BEFORE INSERT OR UPDATE OF "reportLatitude", "reportLongitude" ON reports
FOR EACH ROW
WHEN (NEW."reportLongitude" IS NOT NULL AND NEW."reportLatitude" IS NOT NULL)
EXECUTE FUNCTION update_reports_geom();
